/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package contentmanagementsystem;
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.*;
import javax.swing.JFrame;

/**
 *
 * @author Jimmy
 */
public class NavGUI extends javax.swing.JFrame {
    
    private BufferedImage backBuffer;
    private Insets insets;
    
    private Bubble bubble;
    
    private int windowWidth;
    private int windowHeight;
    private int x = 200;
    private int y = 200;
    private int x2 = 200;
    private int y2 = 200;
   
    /**
     * Creates new form NavGUI
     */
    public NavGUI() {
        initComponents();
                //sets the width and height of the window.
        windowWidth = 550;
        windowHeight = 550;
        
        //sets up an array of bubbles
         //if( i == 0 )
         //{
                bubble = new Bubble();
                bubble.isParent(true);
           // }
          //  else
          //  {
                bubble = new Bubble();
                bubble.isParent(false);
          //  }
        //}
        
        //initializes the following variables
        setTitle("Content Management System");
        setSize(windowWidth,windowHeight);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        
        //initializes the insets for the application.
        //insets defines the field in which animation can occur.
        insets = getInsets();
        setSize(insets.left + windowWidth + insets.right, 
                insets.top + windowHeight + insets.bottom);
        
        backBuffer = new BufferedImage(windowWidth, windowHeight, 
                BufferedImage.TYPE_INT_RGB);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NavGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NavGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NavGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NavGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NavGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    // End of variables declaration//GEN-END:variables
 //the update method updates the position of the graphics according to the inputs.   
 public void update(int addX, int addY)
 {
     //Method needs to be updated to receive an array of updated locations.
     //a 3D array of x and why to add to each bubble.
            bubble.updateX(addX);
            bubble.updateY(addY);
 }
  
 //the draw method applies any updates to the application.
 public void draw()
 {
        Graphics g = getGraphics();
        Graphics bbg = backBuffer.getGraphics();
        
        bbg.setColor(Color.WHITE);
        bbg.fillRect(0, 0, windowWidth, windowHeight);
        
        bbg.setColor(Color.BLUE);
        bbg.fillOval(x, y, 50, 50);
        
        bbg.setColor(Color.BLUE);
        bbg.fillOval(x2, y2, 50, 50);
        
        //the below tests the bubble functions.
        bbg.setColor(Color.BLUE);
        bbg.fillOval(bubble.getX(),bubble.getY(), bubble.getSize(),
                        bubble.getSize());
        
        g.drawImage(backBuffer, insets.left, 50, this);
 }
}
